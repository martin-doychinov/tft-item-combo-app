{"version":3,"sources":["components/Tooltip.js","components/ItemCombos.js","serviceWorker.js","index.js"],"names":["getBaseItemById","id","baseItems","filter","item","getBuffName","buffName","split","code","name","Tooltip","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","itemData","state","baseItem1","recipe","baseItem2","react_default","a","createElement","className","style","backgroundImage","concat","img","description","buffs","length","map","buff","index","Fragment","key","title","icon","amount","React","Component","library","add","fas","compare","arr1","arr2","JSON","stringify","sort","ItemCombos","filterItems","e","target","filteredItems","comboItems","i","push","setState","allComboItems","resetFilter","addItemToInventory","parseInt","inventoryOnlyIDs","inventory","getAllItemCombos","clearInventory","availableItemCombos","comboArray","k","uniqueCombos","_loop","every","combo","_loop2","some","show","_this2","onClick","backgroundSize","backgroundRepeat","backgroundPosition","index_es","components_Tooltip","Boolean","window","location","hostname","match","ReactDOM","render","components_ItemCombos","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8d03c37.chunk.js","sourcesContent":["import React from \"react\";\r\nimport baseItems from \"../data/baseItems\";\r\nimport comboItems from \"../data/comboItems\";\r\n\r\nconst getBaseItemById = id => {\r\n  return baseItems.filter(item => item.id === id)[0];\r\n};\r\n\r\nconst getComboItemById = id => {\r\n  return comboItems.filter(item => item.id === id)[0];\r\n};\r\n\r\nconst getBuffName = buffName => {\r\n  buffName = buffName.split(\"-\")[1];\r\n  const buffNames = [\r\n    { code: \"as\", name: \"Attack Speed\" },\r\n    { code: \"ar\", name: \"Armour\" },\r\n    { code: \"mr\", name: \"Magic Resistance\" },\r\n    { code: \"ap\", name: \"Ability Power\" },\r\n    { code: \"ad\", name: \"Attack Damage\" },\r\n    { code: \"mana\", name: \"Mana\" },\r\n    { code: \"hp\", name: \"Hit Points\" }\r\n  ];\r\n  return buffNames.filter(name => name.code === buffName)[0].name;\r\n};\r\n\r\nclass Tooltip extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { itemData } = props;\r\n\r\n    this.state = {\r\n      itemData\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const item = this.props.itemData;\r\n    const baseItem1 = getBaseItemById(item.recipe[0]);\r\n    const baseItem2 = getBaseItemById(item.recipe[1]);\r\n    return (\r\n      <div className=\"combo-list-item\">\r\n        <div className=\"item-info\">\r\n          <div\r\n            className=\"img-container\"\r\n            style={{\r\n              backgroundImage: `url(../img/combo/${item.img}.png)`\r\n            }}\r\n          />\r\n          <div className=\"item-content\">\r\n            <h4 className=\"item-name\">{item.name}</h4>\r\n            <p className=\"description\">{item.description}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"recipe\">\r\n          <div>\r\n            {/* <p>Recipe:</p> */}\r\n            <div\r\n              className=\"recipe-img\"\r\n              style={{\r\n                backgroundImage: `url(../img/base/${baseItem1.img}.png)`\r\n              }}\r\n            />\r\n            <h5>{baseItem1.name}</h5>\r\n            <div\r\n              className=\"recipe-img\"\r\n              style={{\r\n                backgroundImage: `url(../img/base/${baseItem2.img}.png)`\r\n              }}\r\n            />\r\n            <h5>{baseItem2.name}</h5>\r\n          </div>\r\n          {item.buffs.length > 0 && (\r\n            <div>\r\n              {/* Bonus: */}\r\n              {item.buffs.map((buff, index) => {\r\n                return (\r\n                  <React.Fragment key={index}>\r\n                    <div\r\n                      className=\"buff\"\r\n                      title={getBuffName(buff.icon)}\r\n                      style={{\r\n                        backgroundImage: `url(../img/buffs/${buff.icon}.svg)`\r\n                      }}\r\n                    />\r\n                    {buff.amount}\r\n                  </React.Fragment>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Tooltip;\r\n","import React from \"react\";\r\nimport baseItems from \"../data/baseItems\";\r\nimport comboItems from \"../data/comboItems\";\r\nimport Tooltip from \"../components/Tooltip\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nlibrary.add(fas);\r\n\r\nconst controls = [\r\n  { icon: \"icon-ap\", name: \"Ability Power Items\" },\r\n  { icon: \"icon-ad\", name: \"Attack Damage Items\" },\r\n  { icon: \"icon-ar\", name: \"Armor Items\" },\r\n  { icon: \"icon-mana\", name: \"Mana Items\" },\r\n  { icon: \"icon-mr\", name: \"Magic Resistance Items\" },\r\n  { icon: \"icon-hp\", name: \"Health Items\" }\r\n];\r\n\r\nconst compare = (arr1, arr2) => {\r\n  // returns true if arrays are unique\r\n  return JSON.stringify(arr1.sort()) !== JSON.stringify(arr2.sort());\r\n};\r\n\r\nconst getBaseItemById = id => {\r\n  return baseItems.filter(item => item.id === id)[0];\r\n};\r\n\r\nconst getComboItemById = id => {\r\n  return comboItems.filter(item => item.id === id)[0];\r\n};\r\n\r\nconst getBuffName = buffName => {\r\n  buffName = buffName.split(\"-\")[1];\r\n  const buffNames = [\r\n    { code: \"as\", name: \"Attack Speed\" },\r\n    { code: \"ar\", name: \"Armour\" },\r\n    { code: \"mr\", name: \"Magic Resistance\" },\r\n    { code: \"ap\", name: \"Ability Power\" },\r\n    { code: \"ad\", name: \"Attack Damage\" },\r\n    { code: \"mana\", name: \"Mana\" },\r\n    { code: \"hp\", name: \"Hit Points\" }\r\n  ];\r\n  return buffNames.filter(name => name.code === buffName)[0].name;\r\n};\r\n\r\nclass ItemCombos extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      inventory: [],\r\n      inventoryOnlyIDs: [],\r\n      availableItemCombos: [],\r\n      show: false,\r\n      allComboItems: comboItems\r\n    };\r\n  }\r\n\r\n  filterItems = e => {\r\n    const id = e.target.id;\r\n    const filteredItems = [];\r\n\r\n    comboItems.map(item => {\r\n      if (item.buffs.length > 0) {\r\n        for (let i = 0; i < item.buffs.length; i++) {\r\n          if (item.buffs[i].icon === id) {\r\n            filteredItems.push(item);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    this.setState({ allComboItems: filteredItems });\r\n  };\r\n\r\n  resetFilter = () => {\r\n    this.setState({ allComboItems: comboItems });\r\n  };\r\n\r\n  addItemToInventory = e => {\r\n    const id = parseInt(e.target.id);\r\n    const inventoryOnlyIDs = this.state.inventoryOnlyIDs;\r\n    inventoryOnlyIDs.push(id);\r\n\r\n    const item = getBaseItemById(id);\r\n    const inventory = this.state.inventory;\r\n    inventory.push(item);\r\n\r\n    this.setState({ inventory, inventoryOnlyIDs });\r\n    this.getAllItemCombos();\r\n  };\r\n\r\n  clearInventory = () => {\r\n    this.setState({\r\n      inventory: [],\r\n      inventoryOnlyIDs: [],\r\n      availableItemCombos: []\r\n    });\r\n  };\r\n\r\n  getAllItemCombos = () => {\r\n    const { inventoryOnlyIDs } = this.state;\r\n\r\n    // Get all possible item combinations\r\n    const comboArray = [];\r\n    for (let i = 0; i < inventoryOnlyIDs.length; i++) {\r\n      for (let k = i + 1; k < inventoryOnlyIDs.length; k++) {\r\n        comboArray.push([inventoryOnlyIDs[i], inventoryOnlyIDs[k]]);\r\n      }\r\n    }\r\n\r\n    // Get all unique item combinations\r\n    const uniqueCombos = [];\r\n    for (let i = 0; i < comboArray.length; i++) {\r\n      if (uniqueCombos.every(combo => compare(combo, comboArray[i]))) {\r\n        uniqueCombos.push(comboArray[i]);\r\n      }\r\n    }\r\n\r\n    // Match the item combinations to item objects\r\n    const availableItemCombos = [];\r\n    for (let i = 0; i < comboItems.length; i++) {\r\n      if (uniqueCombos.some(combo => !compare(combo, comboItems[i].recipe))) {\r\n        availableItemCombos.push(comboItems[i]);\r\n      }\r\n    }\r\n\r\n    this.setState({ availableItemCombos });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <section className=\"section\">\r\n          <h1 className=\"title-big \">Add items to inventory</h1>\r\n          <ul className=\"btn-list\">\r\n            {baseItems.map((item, index) => (\r\n              <button\r\n                key={index}\r\n                id={item.id}\r\n                className=\"filter-btn\"\r\n                onClick={this.addItemToInventory}\r\n              >\r\n                <div\r\n                  className=\"icon-container round big\"\r\n                  style={{\r\n                    backgroundImage: `url(../img/base/${item.img}.png)`,\r\n                    backgroundSize: \"cover\",\r\n                    backgroundRepeat: \"no-repeat\",\r\n                    backgroundPosition: \"center\"\r\n                  }}\r\n                />\r\n              </button>\r\n            ))}\r\n            <button className=\"filter-btn\" onClick={this.clearInventory}>\r\n              <div className=\"icon-container round big\">\r\n                <FontAwesomeIcon icon=\"redo-alt\" />\r\n              </div>\r\n            </button>\r\n          </ul>\r\n        </section>\r\n\r\n        <section className=\"section\">\r\n          <h1 className=\"title-big\">Inventory</h1>\r\n          <ul className=\"item-icon-list\">\r\n            {this.state.inventory.length > 0 ? (\r\n              this.state.inventory.map((item, index) => (\r\n                <li\r\n                  key={index}\r\n                  className=\"item-icon\"\r\n                  style={{\r\n                    backgroundImage: `url(../img/base/${item.img}.png)`\r\n                  }}\r\n                />\r\n              ))\r\n            ) : (\r\n              <p>0 items in inventory.</p>\r\n            )}\r\n          </ul>\r\n        </section>\r\n\r\n        <section className=\"section\">\r\n          <h1 className=\"title-big\">Available Combos</h1>\r\n          <ul className=\"item-icon-list\">\r\n            {this.state.availableItemCombos.length > 0 ? (\r\n              this.state.availableItemCombos.map((item, index) => (\r\n                <li\r\n                  key={index}\r\n                  className=\"item-icon\"\r\n                  style={{\r\n                    backgroundImage: `url(../img/combo/${item.img}.png)`\r\n                  }}\r\n                >\r\n                  <Tooltip itemData={item} />\r\n                </li>\r\n              ))\r\n            ) : (\r\n              <p>0 available combos.</p>\r\n            )}\r\n          </ul>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ItemCombos;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./stylesheets/main.scss\";\nimport ItemCombos from \"./components/ItemCombos\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<ItemCombos />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}